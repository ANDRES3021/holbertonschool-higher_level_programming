>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

1 - Declaration of the matrix and test of the function
>>> matrix = [[1, 2, 3],[4, 5, 6]]

>>> matrix_divided(matrix, 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

2 - test of the function

>>> print(matrix_divided(matrix, 4))
[[0.25, 0.5, 0.75], [1.0, 1.25, 1.5]]

3 - print function return

>>> print(matrix_divided(matrix, 3))
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]


4 - Matrix with empty lists

>>> matrix = [[], [], []]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

5 - Matrix with elements that are not lists

>>> matrix = [23, [2, 7], [9, 2, 6]]
>>> matrix_divided(not_list, 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

6 - Matrix with elements that are not lists or floats/int

>>> matrix = [["Apple", 1, 2], ["J", 3, 4], ["y2", 5, 6]]
>>> matrix_divided(not_all_num, 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

7 - Matrix with lists of different sizes

>>> matrix = [[1,9,9,1], [2,0,1,9,4], [1,5,9]]

>>> matrix_divided(diff_len, 3)
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size


8 - Should generate a TypeError exception

>>> matrix_divided(matrix, "dos")
Traceback (most recent call last):
...
TypeError: div must be a number

9 - empty matrix

>>> matrix = []
>>> matrix_divided(matrix, 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

10 - Should generate a ZeroDivisionError exception
>>> print(matrix_divided(matrix, 0))
Traceback (most recent call last):
ZeroDivisionError: division by zero

11 - Should generate a TypeError exception

>>> matrix = [[4, 5, 6], ['seven', 'eight', 'nine']]

>>> matrix_divided(matrix, 1)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats
